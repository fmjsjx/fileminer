#!/usr/bin/env ruby


require 'optparse'
require_relative '../lib/fileminer/tools/io'


def gen_fileminer_conf(options)
  current_path = File.absolute_path __FILE__
  bin_path = File.dirname current_path
  project_path = File.dirname bin_path
  default_file_path = File.join project_path, 'conf', 'fileminer_default.yml'
  if options.key? :out
    out = options[:out]
    dst = out.nil? ? '/etc/fileminer/fileminer.yml' : File.absolute_path(out)
    unless dst.end_with?('.yml') || dst.end_with?('.yaml')
      dst = File.join dst, 'fileminer.yml'
    end

    dst_dir = File.dirname dst
    Dir.mkdirs dst_dir unless Dir.exist? dst_dir

    File.copy_stream default_file_path, dst
    puts "generated config file: #{dst}"
  else
    content = File.open(default_file_path) { |io| io.read }
    puts content
  end
end

def gen_supervisor_conf(options)
  logfile = options[:logfile]
  stdouts = ''
  unless logfile.nil?
    stdouts = <<-EOS
stderr_logfile=#{logfile}
stderr_logfile_maxbytes=10MB
stderr_logfile_backups=10
    EOS
    log_dir = File.dirname logfile
    Dir.mkdirs log_dir unless Dir.exists? log_dir
  end
  wrapper_home = File.join ENV['GEM_HOME'], 'wrappers'
  content = <<-EOS
[program:fileminer]
command=#{wrapper_home}/fileminer
autostart=true
autorestart=true
stopsinal=INT
user=root
#{stdouts}
  EOS
  if options.key? :out
    out = options[:out]
    dst = out.nil? ? './fileminer.ini' : File.absolute_path(out)
    unless dst.end_with?('.ini') || dst.end_with?('.conf')
      dst = File.join dst, 'fileminer.ini'
    end
    dst_dir = File.dirname dst
    Dir.mkdirs dst_dir unless Dir.exists? dst_dir
    File.open(dst, 'w') { |io| io.write content }
  else
    puts content
  end
end


options = Hash.new
OptionParser.new do |opts|
  # banner
  opts.banner = "Usage: fileminer-genconf [options]"
  opts.separator ''
  opts.separator 'Options:'

  # help
  opts.on_tail('-h', '--help', 'Print help') do
    puts opts
    puts ''
    exit
  end

  # type
  options[:type] = :fileminer
  opts.on('-t', '--type fileminer|supervisor', [:fileminer, :supervisor],
          'Type of the config file to be generated', 'Default is fileminer') do |value|
    options[:type] = value
  end

  # out
  opts.on('-o', '--out [path]',
          'Output content to a file',
          'For type fileminer, default is /etc/fileminer/fileminer.yml',
          'For type supervisor, default is ./fileminer.ini') do |value|
    options[:out] = value
  end

  # logfile, just for type=supervisor
  opts.on('-l', '--logfile path', 'Logfile configured on supervisor config file') do |value|
    options[:logfile] = value
  end

end.parse!

case options[:type]
when :fileminer
  gen_fileminer_conf options
when :supervisor
  gen_supervisor_conf options
end
